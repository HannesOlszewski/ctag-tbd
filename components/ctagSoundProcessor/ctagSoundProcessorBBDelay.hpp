#include <atomic>
#include "ctagSoundProcessor.hpp"
#include "mifx/fx_engine.h"
#include "helpers/ctagSineSource.hpp"


namespace CTAG {
    namespace SP {
        class ctagSoundProcessorBBDelay : public ctagSoundProcessor {
        public:
            virtual void Process(const ProcessData &) override;
            // no ctor, use Init() instead, is called from factory after successful creation
            virtual void Init(std::size_t blockSize, void *blockPtr) override;
            virtual ~ctagSoundProcessorBBDelay();

        private:
            virtual void knowYourself() override;

            // FxEngine size must be a power of 2
            typedef mifx::FxEngine<65536, mifx::FORMAT_32_BIT> E;
            E engine;
            float *delayBuffer {nullptr};
            float delayOffset {0.0f};

            HELPERS::ctagSineSource sineSource;

            /*
            float *delayBuffer;

            const uint32_t delayBufferSizeMax {44100};
            uint32_t writeIndex {0};
            float readPos {0.0f}, readPosFiltered {0.0f};
            float delayOffset {0.0f};
            float delayTime_ms {0.0f};

            float lp {0.0f};
*/
            // private attributes could go here
            // autogenerated code here
            // sectionHpp
	atomic<int32_t> time_ms, cv_time_ms;
	atomic<int32_t> feedback, cv_feedback;
	atomic<int32_t> tone, cv_tone;
	atomic<int32_t> mix, cv_mix;
	// sectionHpp
        };
    }
}